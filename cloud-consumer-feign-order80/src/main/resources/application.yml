server:
  port: 80
spring:
  application:
    name: cloud-consumer-openfeign-order
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        prefer-ip-address: true
        service-name: ${spring.application.name}
# OpenFeign性能优化 HttpClient5 暂未完成
    openfeign:
      client:
        config:
          default: # 全局配置
            connect-timeout: 20000 # 连接超时时间 20s
            read-timeout: 20000 # 请求处理超时时间
      compression: # 启用 HTTP 请求和响应压缩的配置 启用压缩可以减少网络带宽的使用，并提高传输效率
        request:
          enabled: true
          min-request-size: 2048
          mime-types: text/xml,application/xml,application/json
        response:
          enabled: true
      # 开启circuitbreaker和分组激活 spring.cloud.openfeign.circuitbreaker.enabled
      circuitbreaker:
       enabled: true
       group:
        enabled: true #没开分组永远不用分组的配置。精确优先、分组次之(开了分组)、默认最后
logging:
  level:
    com:
      jlf:
        cloud:
          apis:
            PayFeignAPI: debug
# Resilience4j CircuitBreaker 按照次数：COUNT_BASED 的例子
#  6次访问中当执行方法的失败率达到50%时CircuitBreaker将进入开启OPEN状态(保险丝跳闸断电)拒绝所有请求。
#  等待5秒后，CircuitBreaker 将自动从开启OPEN状态过渡到半开HALF_OPEN状态，允许一些请求通过以测试服务是否恢复正常。
#  如还是异常CircuitBreaker 将重新进入开启OPEN状态；如正常将进入关闭CLOSE闭合状态恢复正常处理请求。
# Resilience4j CircuitBreaker 按照次数COUNT_BASED 的例子
#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        failureRateThreshold: 50 #设置50%的调用失败时打开断路器，超过失败请求百分⽐CircuitBreaker变为OPEN状态。
#        slidingWindowType: COUNT_BASED # 滑动窗口的类型 按计数统计
#        slidingWindowSize: 6 #滑动窗⼝的⼤⼩配置COUNT_BASED表示6个请求  配置TIME_BASED表示6秒
#        minimumNumberOfCalls: 6 #断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。如果minimumNumberOfCalls为10，则必须最少记录10个样本，然后才能计算失败率。如果只记录了9次调用，即使所有9次调用都失败，断路器也不会开启。
#        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否启用自动从开启状态过渡到半开状态，默认值为true。如果启用，CircuitBreaker将自动从开启状态过渡到半开状态，并允许一些请求通过以测试服务是否恢复正常
#        waitDurationInOpenState: 5s #从OPEN到HALF_OPEN状态需要等待的时间
#        permittedNumberOfCallsInHalfOpenState: 2 #半开状态允许的最大请求数，默认值为10。在半开状态下，CircuitBreaker将允许最多permittedNumberOfCallsInHalfOpenState个请求通过，如果其中有任何一个请求失败，CircuitBreaker将重新进入开启状态。
#        recordExceptions:
#          - java.lang.Exception
#    instances: # 实例
#      cloud-payment-service:
#        baseConfig: default
# Resilience4j CircuitBreaker 按照时间：TIME_BASED 的例子
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 10s # timelimiter 默认限制远程1s，超于1s就超时异常，配置了降级，就走降级逻辑
#  circuitbreaker:
#    configs:
#      default:
#        failureRateThreshold: 50 # 设置50%的调用失败时打开断路器，超过失败请求百分⽐CircuitBreaker变为OPEN状态。
#        slowCallDurationThreshold: 2s # 设置“慢调用”请求的时间阈值，所有响应时间大于 2秒 的请求将视为“慢调用”。
#        slowCallRateThreshold: 30 # 设置慢调用占总请求的百分比阈值，超过该阈值时断路器会进入 OPEN 状态。
#        slidingWindowType: TIME_BASED # 滑动窗口的类型
#        slidingWindowSize: 2 # 滑动窗口的大小配置 意味着系统会在每2秒的时间段内重新计算请求的成功与失败情况 并决定是否调整断路器的状态
#        minimumNumberOfCalls: 2 # 设置计算请求失败率或慢调用率时所需的最小请求数。
#        permittedNumberOfCallsInHalfOpenState: 2 # 设置断路器在半开状态下，允许的最大请求数。
#        waitDurationInOpenState: 5s # 设置断路器在 OPEN 状态下等待恢复到 HALF_OPEN 状态的时间。
#        recordExceptions:
#          - java.lang.Exception
#    instances:
#      cloud-payment-service:
#        baseConfig: default


#### Bulkhead 的例子 隔离可以限制并发执行的数量
resilience4j:
  bulkhead:
    configs:
      default:
        maxConcurrentCalls: 2 # 隔离允许并发线程执行的最大数量
        maxWaitDuration: 1s # 当达到并发调用数量时，新的线程的阻塞时间，我只愿意等待1秒，过时不候进舱壁兜底fallback
    instances:
      cloud-payment-service:
        baseConfig: default
  timelimiter:
    configs:
      default:
        timeout-duration: 20s
# zipkin图形展现地址和采样率设置
management:
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0 #采样率默认为0.1(0.1就是10次只能有一次被记录下来)，值越大收集越及时。